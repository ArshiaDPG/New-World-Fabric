plugins {
    id 'fabric-loom' version '1.5-SNAPSHOT'
    id 'maven-publish'
    id "me.shedaniel.unified-publishing" version "0.1.+"
}

version = project.mod_version
group = project.maven_group

repositories {
    maven { url = 'https://maven.minecraftforge.net/' }
    maven {
        name = 'TerraformersMC'
        url = 'https://maven.terraformersmc.com/'
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "com.github.glitchfiend:TerraBlender-fabric:${project.minecraft_version}-${project.terrablender_version}"
    modImplementation include("com.terraformersmc.terraform-api:terraform-wood-api-v1:${project.terraform_version}")

//    modLocalRuntime "maven.modrinth:emi:${project.emi}"
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.modid + "-fabric-" + project.minecraft_version
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
    }
}
loom {
    runs {
        //
        // This adds a new gradle task that runs the datagen API: "gradlew runDatagenClient"
        //
        datagenClient {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${project.modid}"

            runDir "build/datagen"
        }
    }
}

//
// Adds the generated files into the jar you distribute to players.
//
sourceSets {
    main {
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
        }
    }
}
unifiedPublishing {
    project {
        displayName = "${project.minecraft_version}-${project.mod_version}" // Optional, name of the file
        version = "${project.mod_version}" // Optional, Inferred from project by default
        changelog = '''<ul>
  <li>Ported to 1.20.4.</li>
  <li>Added a new debug feature for fun.</li>
</ul> '''
        releaseType = "release" // Optional, use "release", "beta" or "alpha"
        gameVersions = ["${project.minecraft_version}"]
        gameLoaders = ["fabric"]

        mainPublication tasks.remapJar

        relations {
            depends { // Mark as a required dependency
                curseforge = "terrablender" // Optional, project slug
                modrinth = "terrablender" // Optional, project slug or id
            }
            includes {} // Mark as an included dependency
            optional {} // Mark as an optional dependency
            conflicts {} // Mark as a conflicted dependency
        }


        modrinth {
            token = System.getenv("MODRINTH_TOKEN")
            id = "8XpQehpK" // Required, must be a string, ID of Modrinth project
        }
    }
}